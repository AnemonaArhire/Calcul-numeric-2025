import numpy as np
import math
import timeit


# 1. Determinarea preciziei mașină u
u = 1.0
while (1.0 + u) != 1.0:
    u /= 10

# Revenim la ultima valoare nenulă a lui u
u *= 10
print("Precizia mașină u:", u)

# 2. Verificarea neasociativității adunării
x = 1.0
y = u / 10
z = u / 10

# Calculăm expresiile pentru testul de neasociativitate
left_side = (x + y) + z
right_side = x + (y + z)

# Afișăm rezultatele
print(f"(x + y) + z = {left_side:.20f}")
print(f"x + (y + z) = {right_side:.20f}")

# Verificăm dacă sunt diferite
if left_side != right_side:
    print("Adunarea este neasociativă!")
else:
    print("Adunarea este asociativă.")



contor = 0
found = False
while not found:
    contor += 1
    x = np.random.uniform(0.1, 100)
    y = np.random.uniform(0.1, 100)
    z = np.random.uniform(0.1, 100)

    left_side = (x + y) + z
    right_side = x + (y + z)

    if left_side != right_side:
        found = True
        print(f"\nAdunarea este neasociativă pentru x={x}, y={y}, z={z}")
        print(f"(x + y) + z = {left_side}")
        print(f"x + (y + z) = {right_side}")
        print(f"Număr de încercări: {contor}")

# 3. Aproximarea funcției sin(x) folosind polinoame
import numpy as np
import math
import timeit

# Definim constantele c_i conform cerinței
c1 = 1 / math.factorial(3)
c2 = 1 / math.factorial(5)
c3 = 1 / math.factorial(7)
c4 = 1 / math.factorial(9)
c5 = 1 / math.factorial(11)
c6 = 1 / math.factorial(13)

# Generăm 10.000 de numere aleatoare în intervalul [-pi/2, pi/2]
np.random.seed(42)
x_values = np.random.uniform(-np.pi / 2, np.pi / 2, 10000)

# Calculăm valorile exacte ale lui sin(x)
sin_exact = np.sin(x_values)

# Definim funcțiile polinoamelor optimizate
def P1(x):
    y = x * x
    return x * (1 - c1 * y + c2 * y * y)

def P2(x):
    y = x * x
    return x * (1 - y * (c1 - y * (c2 - c3 * y)))

def P3(x):
    y = x * x
    return x * (1 - y * (c1 - y * (c2 - y * (c3 - c4 * y))))

def P4(x):
    y = x * x
    return x * (1 - y * (c1 - y * (c2 - y * (c3 - c4 * y))))

def P5(x):
    y = x * x
    return x * (1 - y * (c1 - y * (c2 - y * (c3 - c4 * y))))

def P6(x):
    y = x * x
    return x * (1 - y * (c1 - y * (c2 - y * (c3 - c4 * y - c5 * y))))

def P7(x):
    y = x * x
    return x * (1 - y * (c1 - y * (c2 - y * (c3 - y * (c4 - c5 * y)))))

def P8(x):
    y = x * x
    return x * (1 - y * (c1 - y * (c2 - y * (c3 - y * (c4 - y * (c5 - c6 * y))))))

# Stocăm funcțiile într-o listă pentru procesare eficientă
polynomials = [P1, P2, P3, P4, P5, P6, P7, P8]

# Calculăm erorile pentru fiecare polinom
errors = np.zeros((10000, 8))
for i, P in enumerate(polynomials):
    errors[:, i] = np.abs(P(x_values) - sin_exact)

# Clasificăm polinoamele după eroare medie
mean_errors = np.mean(errors, axis=0)
sorted_polynomials_by_error = np.argsort(mean_errors)

# Memorează cele mai bune 3 polinoame pentru fiecare x
best_3_polynomials = np.argsort(errors, axis=1)[:, :3]

# Măsurăm timpul de execuție pentru fiecare polinom
execution_times = []
for i, P in enumerate(polynomials):
    exec_time = min(timeit.repeat(lambda: P(x_values), repeat=5, number=1))
    execution_times.append((i + 1, exec_time))

# Sortăm după timpul de execuție
execution_times.sort(key=lambda x: x[1])

# Afișăm rezultatele
print("\n=== Clasificare după eroare medie ===")
for rank, index in enumerate(sorted_polynomials_by_error):
    print(f"Polinom P{index + 1}: eroare medie = {mean_errors[index]:.10f}")

print("\n=== Clasificare după timp de execuție ===")
for index, exec_time in execution_times:
    print(f"Polinom P{index}: timp = {exec_time:.6f} secunde")

# Afișăm pentru primele 5 valori generate cele mai bune 3 polinoame
print("\n=== Top 3 polinoame cu cele mai mici erori pentru primele 5 valori generate ===")
for i in range(5):
    print(f"x = {x_values[i]:.5f}, sin(x) = {sin_exact[i]:.5f}")
    print(f"  - P{best_3_polynomials[i, 0]+1}")
    print(f"  - P{best_3_polynomials[i, 1]+1}")
    print(f"  - P{best_3_polynomials[i, 2]+1}\n")
