import numpy as np
import math
import timeit


# 1. Determinarea preciziei mașină u
u = 1.0
while (1.0 + u) != 1.0:
    u /= 10

# Revenim la ultima valoare nenulă a lui u
u *= 10
print("Precizia mașină u:", u)

# 2. Verificarea neasociativității adunării
x = 1.0
y = u / 10
z = u / 10

# Calculăm expresiile pentru testul de neasociativitate
left_side = (x + y) + z
right_side = x + (y + z)

# Afișăm rezultatele
print(f"(x + y) + z = {left_side:.20f}")
print(f"x + (y + z) = {right_side:.20f}")

# Verificăm dacă sunt diferite
if left_side != right_side:
    print("Adunarea este neasociativă!")
else:
    print("Adunarea este asociativă.")

# 3. Aproximarea funcției sin(x) folosind polinoame


# Definim constantele c_i
c1 = 1 / math.factorial(3)
c2 = 1 / math.factorial(5)
c3 = 1 / math.factorial(7)
c4 = 1 / math.factorial(9)
c5 = 1 / math.factorial(11)
c6 = 1 / math.factorial(13)

# Generăm 10.000 de numere aleatoare în intervalul [-pi/2, pi/2]
np.random.seed(42)  # Pentru reproducibilitate
x_values = np.random.uniform(-np.pi / 2, np.pi / 2, 10000)

# Calculăm valorile exacte ale lui sin(x)
sin_exact = np.sin(x_values)

# Definim funcțiile polinoamelor optimizate pentru a minimiza operațiile
def P1(x_values):
    y = x_values ** 2  # Calculăm x^2 o dată
    return x_values * (1 - c1 * y + c2 * y * y)  # Folosim y pentru a calcula x^3 și x^5

def P2(x_values):
    y = x_values ** 2  # Calculăm x^2 o dată
    return x_values * (1 - y * (c1 - y * (c2 - c3 * y)))  # Folosim y pentru a calcula x^3, x^5 și x^7

def P3(x_values):
    y = x_values ** 2  # Calculăm x^2 o dată
    y2 = y * y  # Calculăm x^4
    return x_values * (1 + y * (-c1 + y * (c2 + y * (-c3 + c4 * y))))  # Folosim y și y2 pentru a calcula x^3, x^5, x^7, x^9

def P4(x_values):
    y = x_values ** 2  # Calculăm x^2 o dată
    y2 = y * y  # Calculăm x^4
    return x_values * (1 - 0.166 * y + 0.00833 * y2 - c3 * y2 * y + c4 + y2 * y2 * y)  # Folosim y și y2 pentru a calcula x^3, x^5, x^7, x^9

def P5(x_values):
    y = x_values ** 2  # Calculăm x^2 o dată
    y2 = y * y  # Calculăm x^4
    return x_values * (1 - 0.1666 * y + 0.008333 * y2 - c3 * y2 * y + c4 + y2 * y2 * y)  # Folosim y și y2 pentru a calcula x^3, x^5, x^7, x^9

def P6(x_values):
    y = x_values ** 2  # Calculăm x^2 o dată
    y2 = y * y  # Calculăm x^4
    return x_values * (1 - 0.16666 * y + 0.0083333 * y2 - c3 * y2 * y + c4 + y2 * y2 * y)  # Folosim y și y2 pentru a calcula x^3, x^5, x^7, x^9

def P7(x_values):
    y = x_values ** 2  # Calculăm x^2 o dată
    y2 = y * y  # Calculăm x^4
    y3 = y2 * y  # Calculăm x^6
    return x_values * (1 - c1 * y + c2 * y2 - c3 * y3 + c4 + y3 * y2 - c5 * y3 * y)  # Folosim y, y2 și y3 pentru a calcula x^3, x^5, x^7, x^9, x^11

def P8(x_values):
    y = x_values ** 2  # Calculăm x^2 o dată
    y2 = y * y  # Calculăm x^4
    y3 = y2 * y  # Calculăm x^6
    y4 = y3 * y  # Calculăm x^8
    return x_values * (1 - c1 * y + c2 * y2 - c3 * y3 + c4 + y4 - c5 * y3 * y + c6 * y4 * y)  # Folosim y, y2, y3 și y4 pentru a calcula x^3, x^5, x^7, x^9, x^11, x^13

# Stocăm funcțiile într-o listă pentru procesare eficientă
polynomials = [P1, P2, P3, P4, P5, P6, P7, P8]

# Calculăm erorile pentru fiecare polinom
errors = np.zeros((10000, 8))  # Matrice pentru erori
for i, P in enumerate(polynomials):
    errors[:, i] = np.abs(P(x_values) - sin_exact)

# Clasificăm polinoamele după eroare medie
mean_errors = np.mean(errors, axis=0)
sorted_polynomials_by_error = np.argsort(mean_errors)

# Măsurăm timpul de execuție pentru fiecare polinom folosind timeit
execution_times = []
for i, P in enumerate(polynomials):
    # Folosim timeit pentru a măsura timpul de execuție
    stmt = f"P{i+1}(x_values)"  # Actualizăm indexul pentru a corespunde funcțiilor P1, P2, ..., P8
    setup = f"import numpy as np; from __main__ import P{i+1}; x_values = np.random.uniform(-np.pi / 2, np.pi / 2, 10000)"
    exec_time = timeit.timeit(stmt, setup, number=1)
    execution_times.append((i + 1, exec_time))  # Stocăm numărul polinomului și timpul

# Sortăm după timpul de execuție
execution_times.sort(key=lambda x: x[1])

# Afișăm rezultatele
print("\nClasificare după eroare medie:")
for rank, index in enumerate(sorted_polynomials_by_error):
    print(f"Polinom P{index + 1}: eroare medie = {mean_errors[index]:.10f}")

print("\nClasificare după timp de execuție:")
for index, exec_time in execution_times:
    print(f"Polinom P{index}: timp = {exec_time:.6f} secunde")
