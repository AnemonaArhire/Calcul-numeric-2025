import numpy as np
from scipy.sparse import lil_matrix, csr_matrix

def citire_fisier(nume_fisier, tip='matrice'):
    try:
        with open(nume_fisier, 'r') as f:
            n = int(f.readline().strip())
            if tip == 'matrice':
                A = lil_matrix((n, n))
                for line in f:
                    valori = line.strip().replace(',', ' ').split()
                    if len(valori) == 3:
                        try:
                            val, i, j = float(valori[0]), int(float(valori[1])), int(float(valori[2]))
                            if 0 <= i < n and 0 <= j < n:
                                A[i, j] += val
                            else:
                                print(f"‚ö†Ô∏è Indici ie»ôi»õi din limite: i={i}, j={j} (ignorat)")
                        except ValueError as e:
                            print(f"‚ùå Eroare la procesarea liniei: {line} - {e}")
                return A.tocsr()
            elif tip == 'vector':
                b = np.zeros(n)
                for i, line in enumerate(f):
                    if line.strip():
                        b[i] = float(line.strip())
                return b
    except FileNotFoundError:
        print(f"‚ùå Eroare: Fi»ôierul {nume_fisier} nu a fost gƒÉsit!")
        exit(1)
    except ValueError as e:
        print(f"‚ùå Eroare la citirea fi»ôierului {nume_fisier}: {e}")
        exit(1)

def generare_matrice_rara_linii(A):
    n = A.shape[0]
    valori = []
    ind_col = []
    inceput_linii = [0] * (n + 1)

    for i in range(n):
        non_zero_cols = A[i].nonzero()[1]
        inceput_linii[i + 1] = inceput_linii[i] + len(non_zero_cols)
        valori.extend(A[i, col] for col in non_zero_cols)
        ind_col.extend(non_zero_cols)

    inceput_linii[-1] = len(valori)
    return np.array(valori), np.array(ind_col), np.array(inceput_linii)

def generare_matrice_rara_diagonale(A):
    n = A.shape[0]
    diagonale = []
    diag_no = []

    # Folosim `A.tocoo()` pentru a extrage eficient elementele nenule
    coo = A.tocoo()
    for i, j, val in zip(coo.row, coo.col, coo.data):
        if i <= j:  # Ne intereseazƒÉ doar diagonalele principale »ôi cele de deasupra
            diag_no.append(j - i)
            diagonale.append(val)

    return np.array(diagonale), np.array(diag_no)

def verifica_si_elimina_nule(A, b):
    mask = A.diagonal() != 0
    A_filtrata = A[mask][:, mask]
    b_filtrat = b[mask]
    eliminari = len(b) - len(b_filtrat)
    print(f"\n‚úÖ Eliminat {eliminari} r√¢nduri »ôi coloane cu zerouri pe diagonalƒÉ.")
    return A_filtrata, b_filtrat

def completeaza_diagonala(A, epsilon=1e-10):
    diagonala = A.diagonal()
    mask = diagonala == 0
    if mask.any():
        A.setdiag(np.where(mask, epsilon, diagonala))
        print(f"üîÑ AdƒÉugat {epsilon} la elementele diagonalei pentru a evita √ÆmpƒÉr»õirea la zero.")
    return A

def gauss_seidel(A, b, tol=1e-10, max_iter=10000):
    n = A.shape[0]
    x = np.zeros(n)
    max_value = 1e10

    for k in range(max_iter):
        x_new = np.copy(x)
        for i in range(n):
            suma = A[i].dot(x_new) - A[i, i].item() * x_new[i]  # Folosim .item() pentru a extrage scalarul
            x_new[i] = (b[i] - suma) / A[i, i].item()  # Folosim .item() aici

        if np.linalg.norm(x_new - x, ord=np.inf) < tol:
            return x_new, k + 1
        x = x_new

    return x, max_iter

def calculeaza_norma(A, x, b):
    residual = A.dot(x) - b
    return np.linalg.norm(residual, np.inf)

def suma_matrici_rari(A, B):
    return A + B

def verifica_suma_matrici(A, B, C, epsilon=1e-10):
    A_plus_B = A + B
    diff = A_plus_B - C

    for i, j in zip(*diff.nonzero()):
        if abs(diff[i, j]) >= epsilon:
            print(f"‚ùå Elementul A+B[{i}, {j}] = {A_plus_B[i, j]}, dar √Æn C[{i}, {j}] = {C[i, j]}")
            return False

    print("‚úÖ Suma matricelor corespunde cu matricea de referin»õƒÉ!")
    return True

def suma_matrice_rara_pe_linii(A, B, epsilon=1e-10):
    valA, colA, startA = generare_matrice_rara_linii(A)
    valB, colB, startB = generare_matrice_rara_linii(B)
    n = A.shape[0]

    valC = []
    colC = []
    startC = [0] * (n + 1)

    for i in range(n):
        sum_map = {}
        for idx in range(startA[i], startA[i+1]):
            sum_map[colA[idx]] = valA[idx]
        for idx in range(startB[i], startB[i+1]):
            sum_map[colB[idx]] = sum_map.get(colB[idx], 0.0) + valB[idx]

        for c_index in sorted(sum_map.keys()):
            s = sum_map[c_index]
            if abs(s) >= epsilon:
                valC.append(s)
                colC.append(c_index)

        startC[i+1] = len(valC)

    return csr_matrix((valC, colC, startC), shape=(n, n))

def verifica_suma_pe_linii(A, B, C, epsilon=1e-10):
    A_plus_B = suma_matrice_rara_pe_linii(A, B, epsilon)
    valAB, colAB, startAB = generare_matrice_rara_linii(A_plus_B)
    valC, colC, startC = generare_matrice_rara_linii(C)

    n = A.shape[0]

    for i in range(n):
        mapAB = {colAB[idx]: valAB[idx] for idx in range(startAB[i], startAB[i+1])}
        mapC_ = {colC[idx]: valC[idx] for idx in range(startC[i], startC[i+1])}

        all_cols = set(mapAB.keys()).union(set(mapC_.keys()))
        for c_index in all_cols:
            vAB = mapAB.get(c_index, 0.0)
            vC  = mapC_.get(c_index, 0.0)
            if abs(vAB - vC) >= epsilon:
                print(f"‚ùå (Pe linii) R√¢nd {i}, col {c_index}: {vAB} vs. {vC}")
                return False

    print("‚úÖ (Pe linii) Matricea A+B corespunde cu C (verificat prin stocarea rarƒÉ)!")
    return True

def verifica_suma_cu_diferenta(A, B, C, epsilon=1e-10, foloseste_linii=False):
    if foloseste_linii:
        A_plus_B = suma_matrice_rara_pe_linii(A, B, epsilon)
    else:
        A_plus_B = A + B

    D = A_plus_B - C
    row, col = D.nonzero()

    for r, c in zip(row, col):
        val_diff = D[r, c]
        if abs(val_diff) >= epsilon:
            print(f"‚ùå Diferen»õƒÉ mare la linia {r+1}, col {c+1}: {val_diff}")
            return False

    print("‚úÖ Diferen»õa (A+B - C) este < epsilon pentru toate elementele nenule. Suma e corectƒÉ!")
    return True

if __name__ == "__main__":
    nume_fisier_A = "a_1.txt"
    nume_fisier_B = "b_1.txt"

    A = citire_fisier(nume_fisier_A, 'matrice')
    b = citire_fisier(nume_fisier_B, 'vector')

    A, b = verifica_si_elimina_nule(A, b)
    A = completeaza_diagonala(A)

    valori, ind_col, inceput_linii = generare_matrice_rara_linii(A)
    print("\nMatricea rarƒÉ generatƒÉ pe linii:")
    print(f"Valori: {valori}")
    print(f"Indici coloanƒÉ: {ind_col}")
    print(f"√énceput linii: {inceput_linii}")

    diagonale, diag_no = generare_matrice_rara_diagonale(A)
    print("\nMatricea rarƒÉ generatƒÉ pe diagonale:")
    print(f"Diagonale: {diagonale}")
    print(f"NumƒÉr diagonale: {diag_no}")

    try:
        x_GS, iteratii = gauss_seidel(A, b)
        print(f"\n‚úÖ Solu»õia aproximativƒÉ x_GS: {x_GS}")
        print(f"üîÑ NumƒÉr de itera»õii: {iteratii}")
        print(f"üîÑ Norma ||Ax - b||‚àû: {calculeaza_norma(A, x_GS, b)}")
    except ValueError as e:
        print(f"\n‚ùå Eroare Gauss-Seidel: {e}")
        print("‚û°Ô∏è Se poate √Æncerca altƒÉ metodƒÉ...")

    print("\nüîî BONUS - Suma a douƒÉ matrici rare:")
    nume_fisier_A = "a.txt"
    nume_fisier_B = "b.txt"
    nume_fisier_C = "aplusb.txt"

    A_ = citire_fisier(nume_fisier_A, 'matrice')
    B_ = citire_fisier(nume_fisier_B, 'matrice')
    C_ = citire_fisier(nume_fisier_C, 'matrice')

    print("\n[Metoda existentƒÉ (sciPy + for i,j)]")
    if verifica_suma_matrici(A_, B_, C_):
        print("‚úÖ Suma (CSR) coincide cu matricea de referin»õƒÉ (CSR).")
    else:
        print("‚ùå Suma (CSR) nu corespunde!")

    print("\n[Metoda 'pe linii' implementatƒÉ manual]")
    if verifica_suma_pe_linii(A_, B_, C_):
        print("‚úÖ Suma (pe linii) coincide cu C (pe linii).")
    else:
        print("‚ùå Suma (pe linii) nu corespunde!")

    print("\n[Verificare prin diferen»õƒÉ D=(A+B)-C]")
    ok_linii = verifica_suma_cu_diferenta(A_, B_, C_, foloseste_linii=True)
    if ok_linii:
        print("‚úÖ Suma (pe linii) confirmatƒÉ prin D=(A+B)-C.")
    else:
        print("‚ùå Suma (pe linii) a e»ôuat la verificarea prin diferen»õƒÉ!")

    ok_csr = verifica_suma_cu_diferenta(A_, B_, C_, foloseste_linii=False)
    if ok_csr:
        print("‚úÖ Suma (CSR) confirmatƒÉ prin D=(A+B)-C.")
    else:
        print("‚ùå Suma (CSR) a e»ôuat la verificarea prin diferen»õƒÉ!")
